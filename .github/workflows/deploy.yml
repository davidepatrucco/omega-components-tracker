name: Deploy to Lightsail

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          IMAGE_NAME=myapp
          IMAGE_TAG=${GITHUB_SHA}
          docker build -t $IMAGE_NAME:$IMAGE_TAG .

          # salva immagine in un tar.gz
          docker save $IMAGE_NAME:$IMAGE_TAG | gzip > image.tar.gz

      - name: Upload image to server
        env:
          SSH_HOST: ${{ github.ref == 'refs/heads/staging' && secrets.SSH_HOST_STAGE || secrets.SSH_HOST }}
          SSH_USER: ${{ github.ref == 'refs/heads/staging' && secrets.SSH_USER_STAGE || secrets.SSH_USER }}
          SSH_KEY: ${{ github.ref == 'refs/heads/staging' && secrets.SSH_KEY_STAGE || secrets.SSH_KEY }}
        run: |
          echo "$SSH_KEY" > key && chmod 600 key
          scp -i key -o StrictHostKeyChecking=no image.tar.gz $SSH_USER@$SSH_HOST:/home/$SSH_USER/

      - name: Load & Run image on server
        env:
          SSH_HOST: ${{ github.ref == 'refs/heads/staging' && secrets.SSH_HOST_STAGE || secrets.SSH_HOST }}
          SSH_USER: ${{ github.ref == 'refs/heads/staging' && secrets.SSH_USER_STAGE || secrets.SSH_USER }}
          SSH_KEY: ${{ github.ref == 'refs/heads/staging' && secrets.SSH_KEY_STAGE || secrets.SSH_KEY }}
        run: |
          echo "$SSH_KEY" > key && chmod 600 key
          ssh -i key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST <<'EOF'
            set -e
            IMAGE_NAME=myapp
            IMAGE_TAG=${GITHUB_SHA}

            # load new image
            docker load < image.tar.gz

            # stop and remove old container if exists
            docker stop $IMAGE_NAME || true
            docker rm $IMAGE_NAME || true

            # run new container (esponi porta 80 â†’ 3000, modifica se serve)
            docker run -d --name $IMAGE_NAME -p 80:3000 $IMAGE_NAME:$IMAGE_TAG

            # cleanup vecchie immagini
            docker image prune -f
          EOF