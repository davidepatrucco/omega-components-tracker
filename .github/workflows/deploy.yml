name: Deploy to Lightsail

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ðŸ”‘ Configura credenziali AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # ðŸ”‘ Login a ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # ðŸ“¦ Set TAG in base al branch
      - name: Set image tag
        id: vars
        run: |
          if [ "${GITHUB_REF}" = "refs/heads/staging" ]; then
            echo "TAG=staging" >> $GITHUB_ENV
          else
            echo "TAG=latest" >> $GITHUB_ENV
          fi

      # ðŸ”¨ Build & Push Backend
      - name: Build & Push backend
        uses: docker/build-push-action@v5
        with:
          context: ./omega-app/backend
          file: ./omega-app/backend/Dockerfile.backend
          push: true
          tags: 152485877259.dkr.ecr.us-east-1.amazonaws.com/omega-components-tracker-backend:${{ env.TAG }}

      # ðŸ”¨ Build & Push Frontend
      - name: Build & Push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./omega-app/frontend
          file: ./omega-app/frontend/Dockerfile.frontend
          push: true
          tags: 152485877259.dkr.ecr.us-east-1.amazonaws.com/omega-components-tracker-frontend:${{ env.TAG }}

      # ðŸ”‘ Setup SSH agent (senza salvare file key)
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ github.ref == 'refs/heads/staging' && secrets.SSH_KEY_STAGE || secrets.SSH_KEY }}

      # ðŸš€ Deploy su Lightsail
      - name: Run remote docker compose
        run: |
          echo "[INFO] Branch: ${GITHUB_REF}"
          
          
          if [ "${GITHUB_REF}" = "refs/heads/staging" ]; then
            SSH_HOST="${{ secrets.SSH_HOST_STAGE }}"
            SSH_USER="${{ secrets.SSH_USER_STAGE }}"
            echo "[INFO] Deploy su STAGING: SSH_HOST=$SSH_HOST, SSH_USER=$SSH_USER"
            touch /home/$SSH_USER/omega-components-tracker/omega-app/infra/.env
          else
            SSH_HOST="${{ secrets.SSH_HOST }}"
            SSH_USER="${{ secrets.SSH_USER }}"
            echo "[INFO] Deploy su PRODUCTION: SSH_HOST=$SSH_HOST, SSH_USER=$SSH_USER"
            touch /home/$SSH_USER/omega-components-tracker/omega-app/infra/.env
          fi

          echo "[INFO] Avvio SSH verso $SSH_USER@$SSH_HOST con TAG=${TAG}..."
          ssh -tt -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "bash -l -c \"
            set -euo pipefail
                        
            set -x
            echo '[REMOTE] Inizio deploy su \$(hostname) come utente \$(whoami)'
                        
            echo '[REMOTE] Verifica Docker...'
            if ! command -v docker >/dev/null 2>&1; then
              echo '[REMOTE] Rimozione repo Docker non valido (noble)...'
              sudo sed -i '/download.docker.com.*noble/d' /etc/apt/sources.list
              sudo sed -i '/download.docker.com.*noble/d' /etc/apt/sources.list.d/*.list 2>/dev/null || true
              echo '[REMOTE] Installazione Docker via apt-get...'
              sudo apt-get update && sudo apt-get install -y docker.io && sudo usermod -aG docker $USER
              if ! command -v docker >/dev/null 2>&1; then
                echo '[REMOTE] Fallback: installazione Docker via get.docker.com...'
                curl -fsSL https://get.docker.com | sudo sh
                sudo usermod -aG docker $USER
              fi
              echo '[REMOTE] Docker installato: \$(docker --version)'
            else
              echo '[REMOTE] Docker giÃ  presente: \$(docker --version)'
            fi

            echo '[REMOTE] Verifica docker compose/plugin...'
            if ! command -v docker-compose >/dev/null 2>&1 && ! docker compose version >/dev/null 2>&1; then
              echo '[REMOTE] Installazione binario legacy docker-compose...'
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              echo '[REMOTE] docker-compose installato: $([ -x /usr/local/bin/docker-compose ] && /usr/local/bin/docker-compose --version || echo fallito)'
            fi

            echo '[REMOTE] Verifica AWS CLI...'
            if ! command -v aws >/dev/null 2>&1; then
              echo '[REMOTE] Installazione AWS CLI...'
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf awscliv2.zip aws/
              echo '[REMOTE] AWS CLI installata: $(aws --version)'
            else
              echo '[REMOTE] AWS CLI giÃ  presente: $(aws --version)'
            fi
            echo '[REMOTE] Spostamento in /home/$SSH_USER/omega-app...'
              cd /home/$SSH_USER
              if [ -d "omega-app/.git" ]; then
                echo '[REMOTE] omega-app Ã¨ una git repo, faccio git pull...'
                cd omega-app
                git pull || { echo '[REMOTE] ERRORE: git pull fallito'; exit 1; }
              else
                echo '[REMOTE] omega-app NON Ã¨ una git repo, la elimino e faccio git clone...'
                rm -rf omega-components-tracker
                git clone https://github.com/davidepatrucco/omega-components-tracker.git omega-components-tracker || { echo '[REMOTE] ERRORE: git clone fallito'; exit 1; }
              fi
            echo '[REMOTE] Login a ECR...'
            export AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}"
            export AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}"
            export AWS_REGION="us-east-1"
            echo '[REMOTE] aws ecr get-login-password output:'
            aws ecr get-login-password --region us-east-1 || { echo '[REMOTE] ERRORE: aws ecr get-login-password fallito'; exit 1; }
            echo '[REMOTE] Eseguo login a docker...'
            aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 152485877259.dkr.ecr.us-east-1.amazonaws.com || { echo '[REMOTE] ERRORE: docker login fallito'; exit 1; }

            cd /home/$SSH_USER/omega-components-tracker/omega-app/infra
            if docker compose version >/dev/null 2>&1; then
              echo '[REMOTE] Pull immagini Docker...'
              sudo docker compose -f docker-compose.lightsail.yml pull
              echo '[REMOTE] Avvio container...'
              sudo docker compose -f docker-compose.lightsail.yml up -d
            elif command -v docker-compose >/dev/null 2>&1; then
              echo '[REMOTE] Pull immagini Docker...'
              sudo docker-compose -f docker-compose.lightsail.yml pull
              echo '[REMOTE] Avvio container...'
              sudo docker-compose -f docker-compose.lightsail.yml up -d
            else
              echo '[REMOTE] ERRORE: Nessun comando docker compose disponibile!'; exit 1
            fi

            echo '[REMOTE] Stato container:'
            docker ps -a
            echo '[REMOTE] Fine deploy.'\""