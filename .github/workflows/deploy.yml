name: Deploy to Lightsail

on:
  push:
    branches:
      - main
      - staging
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare bundle for deploy
        run: |
          set -euo pipefail
          # choose env file based on branch
          if [ "${{ github.ref }}" = 'refs/heads/staging' ]; then
            ENV_FILE=.env.staging
            BUNDLE_NAME=bundle.staging.tgz
          else
            ENV_FILE=.env.prod
            BUNDLE_NAME=bundle.prod.tgz
          fi
          echo "Using env file: $ENV_FILE"
          # ensure backend env exists in repo, fallback to .env
          if [ -f "$ENV_FILE" ]; then
            cp "$ENV_FILE" omega-app/backend/.env
          elif [ -f .env ]; then
            cp .env omega-app/backend/.env
          fi
          # Create bundle. Include top-level infra if present, otherwise omega-app already contains infra
          if [ -d infra ]; then
            tar czf $BUNDLE_NAME omega-app infra
          else
            tar czf $BUNDLE_NAME omega-app
          fi
          ls -l $BUNDLE_NAME

      - name: Upload bundle to server
        run: |
          set -euo pipefail
          if [ "${GITHUB_REF}" = 'refs/heads/staging' ]; then
            SSH_HOST="${{ secrets.SSH_HOST_STAGE }}"
            SSH_USER="${{ secrets.SSH_USER_STAGE }}"
            SSH_KEY="${{ secrets.SSH_KEY_STAGE }}"
            BUNDLE_NAME=bundle.staging.tgz
          else
            SSH_HOST="${{ secrets.SSH_HOST }}"
            SSH_USER="${{ secrets.SSH_USER }}"
            SSH_KEY="${{ secrets.SSH_KEY }}"
            BUNDLE_NAME=bundle.prod.tgz
          fi
          # support either raw SSH_KEY or base64-encoded SSH_KEY_B64 (recommended)
          if [ -n "${SSH_KEY_B64:-}" ]; then
            echo "$SSH_KEY_B64" | base64 -d > key
          else
            echo "$SSH_KEY" > key
          fi
          chmod 600 key
          # add host to known_hosts to avoid prompts; useful in CI
          ssh-keyscan -H "$SSH_HOST" >> known_hosts 2>/dev/null || true
          # use verbose scp for easier debugging on failures
          scp -v -i key -o UserKnownHostsFile=known_hosts -o StrictHostKeyChecking=no "$BUNDLE_NAME" "$SSH_USER@$SSH_HOST:/home/$SSH_USER/"

      - name: Extract & run on server (docker compose)
        run: |
          set -euo pipefail
          if [ "${GITHUB_REF}" = 'refs/heads/staging' ]; then
            SSH_HOST="${{ secrets.SSH_HOST_STAGE }}"
            SSH_USER="${{ secrets.SSH_USER_STAGE }}"
            SSH_KEY="${{ secrets.SSH_KEY_STAGE }}"
            BUNDLE_NAME=bundle.staging.tgz
          else
            SSH_HOST="${{ secrets.SSH_HOST }}"
            SSH_USER="${{ secrets.SSH_USER }}"
            SSH_KEY="${{ secrets.SSH_KEY }}"
            BUNDLE_NAME=bundle.prod.tgz
          fi
          # support either raw SSH_KEY or base64-encoded SSH_KEY_B64
          if [ -n "${SSH_KEY_B64:-}" ]; then
            echo "$SSH_KEY_B64" | base64 -d > key
          else
            echo "$SSH_KEY" > key
          fi
          chmod 600 key
            ssh -vvv -i key -o UserKnownHostsFile=known_hosts -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" <<EOF
            set -e
            cd /home/$SSH_USER || exit 1
            tar xzf $BUNDLE_NAME
            # install Docker CE (official repo) if missing (non-interactive)
            if ! command -v docker >/dev/null 2>&1; then
              echo "Docker not found on host, installing Docker CE from official repo (requires sudo)..."
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl gnupg lsb-release
              sudo mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
              sudo systemctl enable --now docker || true
              sudo usermod -aG docker "$USER" || true
            fi
            cd omega-app/infra
            # try both compose formats (use sudo to avoid permission issues)
            sudo docker compose -f docker-compose.lightsail.yml pull || true
            sudo docker compose -f docker-compose.lightsail.yml up -d --build
          EOF